AWSTemplateFormatVersion: 2010-09-09
Description: ---
Parameters:
  VpcCIDR:
      Description: Please enter the IP range (CIDR notation) for this VPC
      Type: String
      Default: 172.16.0.0/16
      AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'

  AZ1PublicSubnetCIDR:
      Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
      Type: String
      Default: 172.16.1.0/24
      AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'

  AZ2PublicSubnetCIDR:
      Description: Please enter the IP range (CIDR notation) for the public subnet in the second Availability Zone
      Type: String
      Default: 172.16.2.0/24
      AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'

  AZ1PrivateSubnetCIDR:
      Description: Please enter the IP range (CIDR notation) for the private subnet in the first Availability Zone
      Type: String
      Default: 172.16.101.0/24
      AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'

  AZ2PrivateSubnetCIDR:
      Description: Please enter the IP range (CIDR notation) for the private subnet in the second Availability Zone
      Type: String
      Default: 172.16.102.0/24
      AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'

  InstanceType:
    Description: Please select an instance type for your EC2 hosts
    Type: String
    Default: "t2.small"
    AllowedValues:
      - "t2.small"
      - "t2.medium"
      - "t2.large"
    ConstraintDescription: must be a valid EC2 instance type.

  InitialClusterSize:
    Description: How many EC2 hosts do you want to initially deploy?
    Type: Number
    Default: 4
    MinValue: 2
    MaxValue: 100
    ConstraintDescription: must be a number between 2-100.

  MaximumClusterSize:
    Description: What is the maximum number of EC2 hosts you want to deploy?
    Type: Number
    Default: 10
    MinValue: 2
    MaxValue: 100
    ConstraintDescription: must be a number between 2-100.

  CPUUtilTargetValue:
    Description: What is the target CPU Utilisation % within the ASG?
    Type: Number
    Default: 70
    MinValue: 1
    MaxValue: 100
    ConstraintDescription: must be a number between 1-100.

  AppSource:
    Description: Please specify the Github project URL for the app you wish to deploy
    Type: String
    Default: https://github.com/adrianmace/rea-syseng-prac
    AllowedPattern: 'https:\/\/(?:www.)?github\.com\/.*\/.*'
    ConstraintDescription: 'must be a github.com project URL. (eg: https://github.com/username/project)'

  AppBranch:
    Description: Please specify the branch you would like to deploy
    Type: String
    Default: master

Mappings:
  AWSInstanceType2Arch:
    t2.small:
      Arch: HVM64
    t2.medium:
      Arch: HVM64
    t2.large:
      Arch: HVM64
  # In all cases, the Amazon Linux 2 AMI is selected (amzn2-ami-hvm-2.0.20190618-x86_64-gp2)
  AWSRegionArch2AMI:
    eu-north-1:
      HVM64: ami-3a199744
    ap-south-1:
      HVM64: ami-09243352e7fc54770
    eu-west-3:
      HVM64: ami-0a11f29b2c0da413d
    eu-west-2:
      HVM64: ami-0aff88ed576e63e90
    eu-west-1:
      HVM64: ami-0f048a9d88ce87044
    ap-northeast-2:
      HVM64: ami-0598d826139c09e4f
    ap-northeast-1:
      HVM64: ami-0bab560bf1ee352f5
    sa-east-1:
      HVM64: ami-08148a76db58400c2
    ca-central-1:
      HVM64: ami-0a45b3ec939a5974a
    ap-southeast-1:
      HVM64: ami-0d53ac3145db0eace
    ap-southeast-2:
      HVM64: ami-00c3d41691e25e54c
    eu-central-1:
      HVM64: ami-0d16ecbd2762ae54a
    us-east-1:
      HVM64: ami-01e3b8c3a51e88954
    us-east-2:
      HVM64: ami-049ceee18ac22d417
    us-west-1:
      HVM64: ami-0a16c82eb0cc3aad8
    us-west-2:
      HVM64: ami-03c652d3a09856345

Resources:
  # --- Virtual Private Cloud Resources ---
  # Define a VPC
  VPC:
      Type: AWS::EC2::VPC
      Properties:
          CidrBlock: !Ref VpcCIDR
          Tags:
            - Key: Name
              Value: !Ref AWS::StackName

  # Define an internet egress point
  InternetGateway:
      Type: AWS::EC2::InternetGateway
      Properties:
        Tags:
          - Key: Name
            Value: !Ref AWS::StackName

  # Link the internet gateway to the VPC created
  InternetGatewayAttachment:
      Type: AWS::EC2::VPCGatewayAttachment
      Properties:
          InternetGatewayId: !Ref InternetGateway
          VpcId: !Ref VPC

  # Define the public subnets for each AZ
  AZ1PublicSubnet:
      Type: AWS::EC2::Subnet
      Properties:
          VpcId: !Ref VPC
          AvailabilityZone: !Select [ 0, !GetAZs ]
          CidrBlock: !Ref AZ1PublicSubnetCIDR
          MapPublicIpOnLaunch: true
          Tags:
            - Key: Name
              Value: !Sub ${AWS::StackName} Public Subnet (AZ1)

  AZ2PublicSubnet:
      Type: AWS::EC2::Subnet
      Properties:
          VpcId: !Ref VPC
          AvailabilityZone: !Select [ 1, !GetAZs ]
          CidrBlock: !Ref AZ2PublicSubnetCIDR
          MapPublicIpOnLaunch: true
          Tags:
            - Key: Name
              Value: !Sub ${AWS::StackName} Public Subnet (AZ2)

  # Define the private subnets for each AZ
  AZ1PrivateSubnet:
      Type: AWS::EC2::Subnet
      Properties:
          VpcId: !Ref VPC
          AvailabilityZone: !Select [ 0, !GetAZs ]
          CidrBlock: !Ref AZ1PrivateSubnetCIDR
          MapPublicIpOnLaunch: false
          Tags:
            - Key: Name
              Value: !Sub ${AWS::StackName} Private Subnet (AZ1)

  AZ2PrivateSubnet:
      Type: AWS::EC2::Subnet
      Properties:
          VpcId: !Ref VPC
          AvailabilityZone: !Select [ 1, !GetAZs ]
          CidrBlock: !Ref AZ2PrivateSubnetCIDR
          MapPublicIpOnLaunch: false
          Tags:
            - Key: Name
              Value: !Sub ${AWS::StackName} Private Subnet (AZ2)

  # Create a NAT gateway for each AZ using an elastic IP
  AZ1NATGatewayEIP:
      Type: AWS::EC2::EIP
      DependsOn: InternetGatewayAttachment
      Properties:
          Domain: vpc

  AZ2NATGatewayEIP:
      Type: AWS::EC2::EIP
      DependsOn: InternetGatewayAttachment
      Properties:
          Domain: vpc

  AZ1NATGateway:
      Type: AWS::EC2::NatGateway
      Properties:
          AllocationId: !GetAtt AZ1NATGatewayEIP.AllocationId
          SubnetId: !Ref AZ1PublicSubnet

  AZ2NATGateway:
      Type: AWS::EC2::NatGateway
      Properties:
          AllocationId: !GetAtt AZ2NATGatewayEIP.AllocationId
          SubnetId: !Ref AZ2PublicSubnet

  # Set up the generic public routing table used by all public subnets
  # Both public subnets only require the default route via the internet gateway
  PublicRouteTable:
      Type: AWS::EC2::RouteTable
      Properties:
          VpcId: !Ref VPC
          Tags:
            - Key: Name
              Value: !Sub ${AWS::StackName} Public Routes

  DefaultPublicRoute:
      Type: AWS::EC2::Route
      DependsOn: InternetGatewayAttachment
      Properties:
          RouteTableId: !Ref PublicRouteTable
          DestinationCidrBlock: 0.0.0.0/0
          GatewayId: !Ref InternetGateway

  AZ1PublicSubnetRouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
          RouteTableId: !Ref PublicRouteTable
          SubnetId: !Ref AZ1PublicSubnet

  AZ2PublicSubnetRouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
          RouteTableId: !Ref PublicRouteTable
          SubnetId: !Ref AZ2PublicSubnet

  # Set up the private routing tables for each of the private subnets
  # Each private subnet uses their respective NAT gateway as an egress point
  AZ1PrivateRouteTable:
      Type: AWS::EC2::RouteTable
      Properties:
          VpcId: !Ref VPC
          Tags:
            - Key: Name
              Value: !Sub ${AWS::StackName} Private Routes (AZ1)

  AZ1DefaultPrivateRoute:
      Type: AWS::EC2::Route
      Properties:
          RouteTableId: !Ref AZ1PrivateRouteTable
          DestinationCidrBlock: 0.0.0.0/0
          NatGatewayId: !Ref AZ1NATGateway

  AZ1PrivateSubnetRouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
          RouteTableId: !Ref AZ1PrivateRouteTable
          SubnetId: !Ref AZ1PrivateSubnet

  AZ2PrivateRouteTable:
      Type: AWS::EC2::RouteTable
      Properties:
          VpcId: !Ref VPC
          Tags:
            - Key: Name
              Value: !Sub ${AWS::StackName} Private Routes (AZ2)

  AZ2DefaultPrivateRoute:
      Type: AWS::EC2::Route
      Properties:
          RouteTableId: !Ref AZ2PrivateRouteTable
          DestinationCidrBlock: 0.0.0.0/0
          NatGatewayId: !Ref AZ2NATGateway

  AZ2PrivateSubnetRouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
          RouteTableId: !Ref AZ2PrivateRouteTable
          SubnetId: !Ref AZ2PrivateSubnet

  # --- Application Load Balancer Resources ---
  # Define a security group for the load balancer
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Access to the application load balancer
      SecurityGroupIngress:
        # Allow access from anywhere to our backend via port 80
        - CidrIp: 0.0.0.0/0
          FromPort: 80
          ToPort: 80
          IpProtocol: -1
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-LoadBalancerSG

  # Define an application load balancer connected to both public AZs
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Ref AWS::StackName
      Subnets: [ !Ref AZ1PublicSubnet, !Ref AZ2PublicSubnet ]
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-LoadBalancer

  # Define a listener for the load balancer (Port 80)
  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup

  # Define a target group for the service
  # This includes a health check to remove unhealthy instances in less than a minute
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${AWS::StackName}-DefaultTargetGroup
      VpcId: !Ref VPC
      Port: 80
      Protocol: HTTP
      Matcher:
        HttpCode: 200-299
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2

  # --- Auto Scaling Group Resources ---
  # Define and build the security group
  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Access to the EC2 hosts and the services that run on them
      SecurityGroupIngress:
        # Only allow inbound access to EC2 from the ELB
        - SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
          IpProtocol: -1
          Description: Access via LoadBalancer only
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-EC2SG

  # Define the launch configuration for each new instance
  ASGLaunchConfig:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Properties:
      ImageId: !FindInMap [ AWSRegionArch2AMI, !Ref 'AWS::Region', !FindInMap [ AWSInstanceType2Arch, !Ref InstanceType, Arch ]]
      SecurityGroups: [ !Ref EC2SecurityGroup ]
      InstanceType: !Ref InstanceType
      UserData: !Base64 
        'Fn::Join':
          - ''
          - - |+
              #!/bin/bash -xe
              yum update -y aws-cfn-bootstrap
              sudo yum install -y git docker
              sudo systemctl enable docker
              sudo systemctl start docker

            - !Sub sudo git clone ${AppSource} /app
            - |+
            
              cd /app

            - 'sudo git checkout '
            - !Sub ${AppBranch}
            - |+

              sudo git submodule update --init --recursive
              sudo docker build -t app:latest /app
              sudo docker run -d -p 80:80 --restart=always app:latest
              
            - '/opt/aws/bin/cfn-signal -e $? '
            - '         --stack '
            - !Ref 'AWS::StackName'
            - '         --resource WebServerGroup '
            - '         --region '
            - !Ref 'AWS::Region'
            - |+

  # Define the ASG itself with min and maximum values
  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub ${AWS::StackName}-ASG
      VPCZoneIdentifier:  [ !Ref AZ1PrivateSubnet, !Ref AZ2PrivateSubnet ]
      LaunchConfigurationName: !Ref ASGLaunchConfig
      MinSize: !Ref InitialClusterSize
      MaxSize: !Ref MaximumClusterSize
      TargetGroupARNs: [ !Ref TargetGroup ]
      Tags:
        - Key: Name
          PropagateAtLaunch: True
          Value: !Sub ${AWS::StackName}-ASG
    DependsOn: [ InternetGatewayAttachment, AZ1NATGateway, AZ2NATGateway, AZ1PrivateSubnetRouteTableAssociation, AZ2PrivateSubnetRouteTableAssociation ]

  # Define a scaling policy to maintain an average CPU Util of value specified by operator
  ScalingPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref AutoScalingGroup
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ASGAverageCPUUtilization
        TargetValue: !Ref CPUUtilTargetValue

Outputs:
  AppURL:
    Description: The URL endpoint for the app
    Value: !Join ["", ["http://", !GetAtt LoadBalancer.DNSName, "/"]]