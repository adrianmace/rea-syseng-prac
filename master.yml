AWSTemplateFormatVersion: 2010-09-09
Description: ---
Parameters:
  EnvironmentName:
      Description: An environment name that will be prefixed to resource names. eg. Prod, Test, Dev, etc.
      Type: String

  VpcCIDR:
      Description: Please enter the IP range (CIDR notation) for this VPC
      Type: String
      Default: 172.16.0.0/16

  AZ1PublicSubnetCIDR:
      Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
      Type: String
      Default: 172.16.1.0/24

  AZ2PublicSubnetCIDR:
      Description: Please enter the IP range (CIDR notation) for the public subnet in the second Availability Zone
      Type: String
      Default: 172.16.2.0/24

  AZ1PrivateSubnetCIDR:
      Description: Please enter the IP range (CIDR notation) for the private subnet in the first Availability Zone
      Type: String
      Default: 172.16.101.0/24

  AZ2PrivateSubnetCIDR:
      Description: Please enter the IP range (CIDR notation) for the private subnet in the second Availability Zone
      Type: String
      Default: 172.16.102.0/24

  InstanceType:
    Description: Please select an instance type for your EC2 hosts
    Type: String
    Default: "t2.small"
    AllowedValues:
      - "t2.small"
      - "t2.medium"
      - "t2.large"
    ConstraintDescription: must be a valid EC2 instance type.

  InitialClusterSize:
    Description: How many EC2 hosts do you want to initially deploy?
    Type: Number
    Default: 4

  MaximumClusterSize:
    Description: What is the maximum number of EC2 hosts you want to deploy?
    Type: Number
    Default: 10
  
  REAcruitmentSource:
    Description: Please specify the Github URL pointing to the sinatra deployment files
    Type: String
    Default: https://github.com/adrianmace/rea-syseng-prac.git

Mappings:
  AWSInstanceType2Arch:
    t2.small:
      Arch: HVM64
    t2.medium:
      Arch: HVM64
    t2.large:
      Arch: HVM64
  AWSInstanceType2NATArch:
    t2.small:
      Arch: NATHVM64
    t2.medium:
      Arch: NATHVM64
    t2.large:
      Arch: NATHVM64
  AWSRegionArch2AMI:
    us-east-1:
      HVM64: ami-0080e4c5bc078760e
      HVMG2: ami-0aeb704d503081ea6
    us-west-2:
      HVM64: ami-01e24be29428c15b2
      HVMG2: ami-0fe84a5b4563d8f27
    us-west-1:
      HVM64: ami-0ec6517f6edbf8044
      HVMG2: ami-0a7fc72dc0e51aa77
    eu-west-1:
      HVM64: ami-08935252a36e25f85
      HVMG2: ami-0d5299b1c6112c3c7
    eu-west-2:
      HVM64: ami-01419b804382064e4
      HVMG2: NOT_SUPPORTED
    eu-west-3:
      HVM64: ami-0dd7e7ed60da8fb83
      HVMG2: NOT_SUPPORTED
    eu-central-1:
      HVM64: ami-0cfbf4f6db41068ac
      HVMG2: ami-0aa1822e3eb913a11
    eu-north-1:
      HVM64: ami-86fe70f8
      HVMG2: ami-32d55b4c
    ap-northeast-1:
      HVM64: ami-00a5245b4816c38e6
      HVMG2: ami-09d0e0e099ecabba2
    ap-northeast-2:
      HVM64: ami-00dc207f8ba6dc919
      HVMG2: NOT_SUPPORTED
    ap-northeast-3:
      HVM64: ami-0b65f69a5c11f3522
      HVMG2: NOT_SUPPORTED
    ap-southeast-1:
      HVM64: ami-05b3bcf7f311194b3
      HVMG2: ami-0e46ce0d6a87dc979
    ap-southeast-2:
      HVM64: ami-02fd0b06f06d93dfc
      HVMG2: ami-0c0ab057a101d8ff2
    ap-south-1:
      HVM64: ami-0ad42f4f66f6c1cc9
      HVMG2: ami-0244c1d42815af84a
    us-east-2:
      HVM64: ami-0cd3dfa4e37921605
      HVMG2: NOT_SUPPORTED
    ca-central-1:
      HVM64: ami-07423fb63ea0a0930
      HVMG2: NOT_SUPPORTED
    sa-east-1:
      HVM64: ami-05145e0b28ad8e0b2
      HVMG2: NOT_SUPPORTED
    cn-north-1:
      HVM64: ami-053617c9d818c1189
      HVMG2: NOT_SUPPORTED
    cn-northwest-1:
      HVM64: ami-0f7937761741dc640
      HVMG2: NOT_SUPPORTED

Resources:
  # --- Virtual Private Cloud Resources ---
  # Define a VPC
  VPC:
      Type: AWS::EC2::VPC
      Properties:
          CidrBlock: !Ref VpcCIDR
          Tags:
            - Key: Name
              Value: !Ref EnvironmentName

  # Define an internet egress point
  InternetGateway:
      Type: AWS::EC2::InternetGateway
      Properties:
        Tags:
          - Key: Name
            Value: !Ref EnvironmentName

  # Link the internet gateway to the VPC created
  InternetGatewayAttachment:
      Type: AWS::EC2::VPCGatewayAttachment
      Properties:
          InternetGatewayId: !Ref InternetGateway
          VpcId: !Ref VPC

  # Define the public subnets for each AZ
  AZ1PublicSubnet:
      Type: AWS::EC2::Subnet
      Properties:
          VpcId: !Ref VPC
          AvailabilityZone: !Select [ 0, !GetAZs ]
          CidrBlock: !Ref AZ1PublicSubnetCIDR
          MapPublicIpOnLaunch: true
          Tags:
            - Key: Name
              Value: !Sub ${EnvironmentName} Public Subnet (AZ1)

  AZ2PublicSubnet:
      Type: AWS::EC2::Subnet
      Properties:
          VpcId: !Ref VPC
          AvailabilityZone: !Select [ 1, !GetAZs ]
          CidrBlock: !Ref AZ2PublicSubnetCIDR
          MapPublicIpOnLaunch: true
          Tags:
            - Key: Name
              Value: !Sub ${EnvironmentName} Public Subnet (AZ2)

  # Define the private subnets for each AZ
  AZ1PrivateSubnet:
      Type: AWS::EC2::Subnet
      Properties:
          VpcId: !Ref VPC
          AvailabilityZone: !Select [ 0, !GetAZs ]
          CidrBlock: !Ref AZ1PrivateSubnetCIDR
          MapPublicIpOnLaunch: false
          Tags:
            - Key: Name
              Value: !Sub ${EnvironmentName} Private Subnet (AZ1)

  AZ2PrivateSubnet:
      Type: AWS::EC2::Subnet
      Properties:
          VpcId: !Ref VPC
          AvailabilityZone: !Select [ 1, !GetAZs ]
          CidrBlock: !Ref AZ2PrivateSubnetCIDR
          MapPublicIpOnLaunch: false
          Tags:
            - Key: Name
              Value: !Sub ${EnvironmentName} Private Subnet (AZ2)

  # Create a NAT gateway for each AZ using an elastic IP
  AZ1NATGatewayEIP:
      Type: AWS::EC2::EIP
      DependsOn: InternetGatewayAttachment
      Properties:
          Domain: vpc

  AZ2NATGatewayEIP:
      Type: AWS::EC2::EIP
      DependsOn: InternetGatewayAttachment
      Properties:
          Domain: vpc

  AZ1NATGateway:
      Type: AWS::EC2::NatGateway
      Properties:
          AllocationId: !GetAtt AZ1NATGatewayEIP.AllocationId
          SubnetId: !Ref AZ1PublicSubnet

  AZ2NATGateway:
      Type: AWS::EC2::NatGateway
      Properties:
          AllocationId: !GetAtt AZ2NATGatewayEIP.AllocationId
          SubnetId: !Ref AZ2PublicSubnet

  # Set up the generic public routing table used by all public subnets
  # Both public subnets only require the default route via the internet gateway
  PublicRouteTable:
      Type: AWS::EC2::RouteTable
      Properties:
          VpcId: !Ref VPC
          Tags:
            - Key: Name
              Value: !Sub ${EnvironmentName} Public Routes

  DefaultPublicRoute:
      Type: AWS::EC2::Route
      DependsOn: InternetGatewayAttachment
      Properties:
          RouteTableId: !Ref PublicRouteTable
          DestinationCidrBlock: 0.0.0.0/0
          GatewayId: !Ref InternetGateway

  AZ1PublicSubnetRouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
          RouteTableId: !Ref PublicRouteTable
          SubnetId: !Ref AZ1PublicSubnet

  AZ2PublicSubnetRouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
          RouteTableId: !Ref PublicRouteTable
          SubnetId: !Ref AZ2PublicSubnet

  # Set up the private routing tables for each of the private subnets
  # Each private subnet uses their respective NAT gateway as an egress point
  AZ1PrivateRouteTable:
      Type: AWS::EC2::RouteTable
      Properties:
          VpcId: !Ref VPC
          Tags:
            - Key: Name
              Value: !Sub ${EnvironmentName} Private Routes (AZ1)

  AZ1DefaultPrivateRoute:
      Type: AWS::EC2::Route
      Properties:
          RouteTableId: !Ref AZ1PrivateRouteTable
          DestinationCidrBlock: 0.0.0.0/0
          NatGatewayId: !Ref AZ1NATGateway

  AZ1PrivateSubnetRouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
          RouteTableId: !Ref AZ1PrivateRouteTable
          SubnetId: !Ref AZ1PrivateSubnet

  AZ2PrivateRouteTable:
      Type: AWS::EC2::RouteTable
      Properties:
          VpcId: !Ref VPC
          Tags:
            - Key: Name
              Value: !Sub ${EnvironmentName} Private Routes (AZ2)

  AZ2DefaultPrivateRoute:
      Type: AWS::EC2::Route
      Properties:
          RouteTableId: !Ref AZ2PrivateRouteTable
          DestinationCidrBlock: 0.0.0.0/0
          NatGatewayId: !Ref AZ2NATGateway

  AZ2PrivateSubnetRouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
          RouteTableId: !Ref AZ2PrivateRouteTable
          SubnetId: !Ref AZ2PrivateSubnet

  # --- Application Load Balancer Resources ---
  # Define a security group for the load balancer
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Access to the application load balancer
      SecurityGroupIngress:
        # Allow access from anywhere to our EC2 services
        - CidrIp: 0.0.0.0/0
          IpProtocol: -1
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-LoadBalancerSG

  # Define an application load balancer connected to both public AZs
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Ref EnvironmentName
      Subnets: [ !Ref AZ1PublicSubnet, !Ref AZ2PublicSubnet ]
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-LoadBalancer

  # Define a listener for the load balancer (Port 80)
  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup

  # Define a target group for the service
  # This includes a health check to remove unhealthy instances in less than a minute
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${EnvironmentName}-DefaultTargetGroup
      VpcId: !Ref VPC
      Port: 80
      Protocol: HTTP
      Matcher:
        HttpCode: 200-299
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2

  # --- Auto Scaling Group Resources ---
  # Define and build the security group
  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Access to the EC2 hosts and the services that run on them
      SecurityGroupIngress:
        # Only allow inbound access to EC2 from the ELB
        - SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
          IpProtocol: -1
          Description: Access via LoadBalancer only
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-EC2SG

  # Define the launch configuration for each new instance
  ASGLaunchConfig:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Metadata:
      Comment: Install the REA-cruitment source
      'AWS::CloudFormation::Init':
        config:
          packages:
            yum:
              ruby: []
              git: []
              nginx: []
              screen: []
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Join 
                - ''
                - - |
                    [main]
                  - stack=
                  - !Ref 'AWS::StackId'
                  - |+
                  - region=
                  - !Ref 'AWS::Region'
                  - |+
              mode: '000400'
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Join 
                - ''
                - - |
                    [cfn-auto-reloader-hook]
                  - |
                    triggers=post.update
                  - >
                    path=Resources.LaunchConfig.Metadata.AWS::CloudFormation::Init
                  - 'action=/opt/aws/bin/cfn-init -v '
                  - '         --stack '
                  - !Ref 'AWS::StackName'
                  - '         --resource LaunchConfig '
                  - '         --region '
                  - !Ref 'AWS::Region'
                  - |+

                  - |
                    runas=root
              mode: '000400'
              owner: root
              group: root
          services:
            sysvinit:
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
    Properties:
      ImageId: !FindInMap [ AWSRegionArch2AMI, !Ref AWS::Region, !FindInMap [ AWSInstanceType2Arch, !Ref InstanceType, Arch ]]
      SecurityGroups: !Ref InstanceSecurityGroup
      InstanceType: !Ref InstanceType
      UserData: !Base64 
        'Fn::Join':
          - ''
          - - |
              #!/bin/bash -xe
            - |
              yum update -y aws-cfn-bootstrap
            - |
              yum update -y aws-cli
            - '/opt/aws/bin/cfn-init -v '
            - '         --stack '
            - !Ref 'AWS::StackName'
            - '         --resource LaunchConfig '
            - '         --region '
            - !Ref 'AWS::Region'
            - |+
            - 'git clone '
            - !Ref REAcruitmentSource
            - |+
            - 'cd '
            - !Select [3, !Split ["/", !Ref REAcruitmentSource]]
            - |+
            - '/bin/bash deploy.sh'
            - |+
            - '/opt/aws/bin/cfn-signal -e $? '
            - '         --stack '
            - !Ref 'AWS::StackName'
            - '         --resource WebServerGroup '
            - '         --region '
            - !Ref 'AWS::Region'
            - |+

  # Define the ASG itself with min and maximum values
  AutoScalingGroup:
    AutoScalingGroupName: !Sub ${EnvironmentName}-ASG
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: !Ref VPC 
      LaunchConfigurationName: !Ref ASGLaunchConfig
      MinSize: !Ref InitialClusterSize
      MaxSize: !Ref MaximumClusterSize
      LoadBalancerNames: !Ref LoadBalancer
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-ASG
  
  # Define the action to take when high CPU alarm is triggered
  ASGScaleUpPolicy:
    Type: "AWS::ApplicationAutoScaling::ScalingPolicy"
    Properties:
      AutoScalingGroupName: !Ref AutoScalingGroup
      AdjustmentType: ChangeInCapacity
      Cooldown: '1'
      ScalingAdjustment: 1

  # Define the action to take when low CPU alarm is triggered
  ASGScaleDownPolicy:
    Type: "AWS::ApplicationAutoScaling::ScalingPolicy"
    Properties:
      AutoScalingGroupName: !Ref AutoScalingGroup
      AdjustmentType: ChangeInCapacity
      Cooldown: '1'
      ScalingAdjustment: -1

  # Define the High CPU alarm for the ASG
  ASGHighCPUAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: CPU utilization greater than 90%
      AlarmDescription: The automatic scaling group is under high load
      Namespace: AWS/EC2
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref AutoScalingGroup
      MetricName: CPUUtilization
      Statistic: Average
      Period: "60"
      EvaluationPeriods: "3"
      Threshold: "90"
      ComparisonOperator: GreaterThanThreshold
      AlarmActions: !Ref ASGScaleUpPolicy

  # Define the low CPU alarm for the ASG
  ASGLowCPUAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: CPU utilization less than 70%
      AlarmDescription: The automatic scaling group is under low load
      Namespace: AWS/EC2
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref AutoScalingGroup
      MetricName: CPUUtilization
      Statistic: Average
      Period: "60"
      EvaluationPeriods: "10"
      Threshold: "70"
      ComparisonOperator: LessThanThreshold
      AlarmActions: !Ref ASGScaleDownPolicy

Outputs:
  REAcruitmentURL:
    Description: The URL endpoint for the REA-cruitment app
    Value: !Join ["", [!GetAtt ALB.Outputs.LoadBalancerUrl, "/"]]